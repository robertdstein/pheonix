[tool.poetry]
name = "snipergw"
version = "0.2.0"
description = ""
authors = ["Robert Stein <rdstein@caltech.edu>"]
license = "MIT"
readme = "README.md"
include = ["gwemopt/bin/**"]


[tool.poetry.dependencies]
python = ">3.10,<3.12"
requests = "^2.31.0"
backoff = "^2.2.1"
ligo-gracedb = "^2.12.0"
jupyter = "^1.0.0"
lxml = "^4.9.3"
wget = "^3.2"
astropy = "^5.3"
numpy = "1.26.0"
gwemopt = { path = "./snipergw/gwemopt", develop = true }
pandas = ">1.4.0"
pydantic = "^1.10.9"
planobs = "^0.7.3"
black = "^23.9.1"
isort = {extras = ["pyproject"], version = "^5.12.0"}
pre-commit = "^3.5.0"
coveralls = {extras = ["toml"], version = "^3.3.1"}
winterapi = "^0.2.0"

[tool.isort]
profile = "black"
skip = ["snipergw/gwemopt"]

[tool.black]
exclude = "snipergw/gwemopt"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
