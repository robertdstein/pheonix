[build-system]
requires = ["setuptools>=45", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "snipergw"
version = "1.0.0"
description = ""
authors = [
    {name = "Robert Stein", email = "rdstein@caltech.edu"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Intended Audience :: Science/Research',
    'Intended Audience :: End Users/Desktop',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Astronomy',
    'Topic :: Scientific/Engineering :: Physics',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]
dependencies = [
    "requests",
    "backoff",
    "ligo-gracedb",
    "lxml",
    "wget",
    "astropy",
    "numpy",
    "gwemopt==0.2.2",
    "pandas",
    "pydantic>=2.2.0",
    "planobs",
    "winterapi >= 1.4.0",
]
[project.optional-dependencies]
dev = [
    "black == 24.4.2",
    "isort == 5.13.2",
    "pylint == 3.2.2",
    "coveralls",
]

[project.urls]
Homepage = "https://github.com/winter-telescope/winterapi"

<<<<<<< HEAD
[tool.poetry.dependencies]
python = ">3.10,<3.12"
requests = "^2.31.0"
backoff = "^2.2.1"
ligo-gracedb = "^2.12.0"
jupyter = "^1.0.0"
lxml = "^4.9.3"
wget = "^3.2"
astropy = "^5.3"
numpy = "1.26.1"
gwemopt = { path = "./snipergw/gwemopt", develop = true }
pandas = ">1.4.0"
pydantic = "^1.10.9"
planobs = "^0.7.3"
black = "^23.10.1"
isort = {extras = ["pyproject"], version = "^5.12.0"}
pre-commit = "^3.5.0"
coveralls = {extras = ["toml"], version = "^3.3.1"}
winterapi = "^0.2.0"

[tool.setuptools]
packages = ["snipergw"]

[tool.coverage.run]
source = ["snipergw"]

[tool.isort]
profile = "black"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true
